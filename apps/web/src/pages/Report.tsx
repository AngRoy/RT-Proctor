import React,{useEffect,useMemo,useState} from 'react'
import Sparkline from '../components/Sparkline'
import { useParams } from 'react-router-dom'
const LABELS:Record<string,string>={fs_exit:'Fullscreen exited',gaze_off:'Off-screen gaze (30s window)',gaze_off_strong:'Prolonged off-screen gaze with low blink rate',gaze_off_aoi:'Gaze deviates from expected on-screen area while typing/reading',conversation_pattern:'Conversation pattern (speech toggles)',conversation_pattern_strong:'Rapid back-and-forth speaking pattern (strong)',other_speaker:'Voice differs from baseline',other_speaker_strong:'Voiceprint differs from enrollment (strong)',mass_delete:'Mass delete',burst_after_idle:'Burst after idle',language_change:'Language changed',tab_blur:'Tab left',tab_focus:'Tab focus'}
export default function Report(){const {sid}=useParams();const [data,setData]=useState<any>(null);useEffect(()=>{fetch('/api/report/'+sid,{headers:{'x-exam':localStorage.getItem('exam_token')||'','x-admin':localStorage.getItem('admin_pwd')||''}}).then(r=>r.json()).then(setData)},[sid]);const timestamps=useMemo(()=>data?data.flags.map((f:any)=>f.ts):[],[data]);const bins=useMemo(()=>{if(!timestamps.length) return [];const t0=timestamps[0],t1=timestamps[timestamps.length-1];const N=Math.min(40,Math.max(5,Math.ceil((t1-t0)/15000)));const arr=Array(N).fill(0);timestamps.forEach(t=>{const k=Math.min(N-1,Math.floor((t-t0)/(t1-t0+1e-6)*N));arr[k]++});return arr},[timestamps]);const snaps=(data?.flags||[]).map((f:any)=>f.details?.snapshot).filter((x:string)=>!!x);return <div><h2>Report for {sid}</h2><div className='row'><div className='card'><h3>Timeline</h3>{bins.length?<Sparkline bins={bins}/>:<div>No flags.</div>}<div style={{marginTop:8}}><button className='btn' onClick={()=>window.open(`/api/report/${sid}/csv?admin=${localStorage.getItem('admin_pwd')||''}&token=${localStorage.getItem('exam_token')||''}`,'_blank')}>Download CSV</button><button className='btn' style={{marginLeft:8}} onClick={()=>window.open(`/api/report/${sid}/pdf?admin=${localStorage.getItem('admin_pwd')||''}&token=${localStorage.getItem('exam_token')||''}`,'_blank')}>Download PDF</button></div></div><div className='card'><h3>Summary</h3><div>Total flags: {data?.flags.length||0}</div></div></div>{snaps.length>0&&<div className='card' style={{marginTop:12}}><h3>Snapshots</h3><div className='row'>{snaps.map((s:string,i:number)=>(<img key={i} className='thumb' src={s}/>))}</div></div>}<h3>Flags</h3><div className='card'>{(data?.flags||[]).map((f:any,i:number)=>(<div key={i} className='flag'><div><b className={'sev '+f.severity}>{f.severity.toUpperCase()}</b> â€¢ {LABELS[f.kind]||f.kind} <small style={{color:'#789'}}>@{new Date(f.ts).toLocaleTimeString()}</small></div>{f.details?.snapshot&&<img className='thumb' src={f.details.snapshot}/>} {f.details&&<pre style={{whiteSpace:'pre-wrap',color:'#9fb'}}>{JSON.stringify(f.details)}</pre>}</div>))}</div></div>}
